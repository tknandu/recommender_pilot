# THE CONFIGURATION FILE

# Who is going to load the data. Must implement DataLoader interface
DataLoaderClass=org.recommender101.data.DefaultDataLoader:filename=data/movielens/ml-100k/MovieLens100kRatings.txt|sampleNUsers=5
# The data model class -> Implement your own if you need to manage more data.
# DataModelClass=org.recommender101.data.DataModel

# Evaluation type. Default CrossValidation
# EvaluationType=CrossValidation

# Use this one with your own data loader (e.g., the and a defined training/test split) which reads time information
#EvaluationType=GivenTrainTestSplit

# Here's how we split the data for cross validation. Must implement DataSplitterInterface.
DataSplitterClass=org.recommender101.data.DefaultDataSplitter:nbFolds=5

#An example of how to split the data based on time stamps
#DataSplitterClass=org.recommender101.extensions.datasplitter.TimeBasedDataSplitter:testPercentage=80


AlgorithmClasses=	org.recommender101.recommender.extensions.funksvd.FunkSVDRecommender:numFeatures=50|initialSteps=2,
				 	#org.recommender101.recommender.extensions.slopeone.SlopeOneRecommender,\
				 	#org.recommender101.recommender.extensions.factorizednghbors.FactorizedNeighborhoodRecommender:lambda=0.03|gamma=0.01|iterations=100|nbFactors=50
				 	
# Now the metrics. Must implement either the PredictionEvaluator or RecommendationListEvaluator interface
Metrics = 	org.recommender101.eval.metrics.Precision:topN=10|targetSet=allrelevantintestset|,
			#org.recommender101.eval.metrics.Recall:topN=10|targetSet=allrelevantintestset,
			#org.recommender101.eval.metrics.NDCG:topN=10,\
			#org.recommender101.eval.metrics.MAE,\
			#org.recommender101.eval.metrics.RMSE
			
# Global settings
# Number of threads (Recommended: One for every CPU core available)
GlobalSettings.numOfThreads = 1

# What is considered to be a hit
GlobalSettings.listMetricsRelevanceMinRating = 1

# Use this, if the relevance threshold should be relative per user (default)
#GlobalSettings.listMetricsRelevanceMinPercentageAboveAverage = 1

# The ratings
GlobalSettings.minRating = 1
GlobalSettings.maxRating = 5

		  		  
# The global default for top-n
GlobalSettings.topN = 10

# Output
CSVOutputPath=output.csv

# -------------------------------------------
# A test for content-based recommendation
# -------------------------------------------
# Run the class org.recommender101.data.extensions.contentbaseddemo.MovieLens10MDataPreparator first to download a larger data set
# and to prepare TF-IDF-vectors for the experiments
# Possible settings for content-based recommendation 

# DataLoaderClass=org.recommender101.data.DefaultDataLoader:filename=data/movielens/MovieLens5MRatings.txt|sampleNUsers=100
# AlgorithmClasses=	org.recommender101.recommender.extensions.contentbased.ContentBasedRecommender:dataDirectory=data/movielens|NbNeighborsForPrediction=10					 


# DEBUGGING
# Give the maximum number of rounds to run the evaluation (use -1 to switch off) 
Debug.MaxValidationRounds=1


# Stop after n predictions (debug) for prediction based metrics
Debug.MaxRatingPredictions=-1
# Stop after n recommendations in list-based metrics
Debug.MaxRecommendations=-1

# Print debugging messages (ON/OFF)
Debug.Messages = ON
